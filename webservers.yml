AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  HealthCheckGracePeriodPara:
    Description: The Healthcheck Period.
    Type: String
    Default: 300
  HealthCheckIntervalSecondsPara:
    Description: The Healthcheck Interval Period.
    Type: String
    Default: 30
  HealthCheckProtocolPara:
    Description: The Healthcheck Protocol.
    Type: String
    AllowedValues:
      - "HTTP"
      - "HTTPS"
    Default: HTTP
  HealthCheckTimeoutSecondsPara:
    Description: The Healthcheck Protocol.
    Type: String
    Default: 15
  HealthyThresholdCountPara:
    Description: The Healthcheck Protocol.
    Type: String
    Default: 5
  UnHealthyThresholdCountPara:
    Description: The Healthcheck Protocol.
    Type: String
    Default: 3
  
  CPUTargetValue:
    Description: The Healthcheck Period.
    Type: String
    Default: 70
  InstanceTypeValue:
    Description: Select the Instance Type
    Type: String
    AllowedValues:
      - r6g.medium	
      - r6g.large
      - r6g.xlarge
      - r6g.2xlarge
      - r6g.4xlarge	
      - r6g.8xlarge	
      - r6g.12xlarge	
      - r6g.16xlarge	
      - r6g.metal	
      - r6gd.medium	
      - r6gd.large	
      - r6gd.xlarge	
      - r6gd.2xlarge	
      - r6gd.4xlarge	
      - r6gd.8xlarge	
      - r6gd.12xlarge	
      - r6gd.16xlarge	
      - r6gd.meta
      - t2.micro
    Default: t2.micro
  InstanceImageId:
    Description: The Image Id of the Instance
    Type: String
    Default: ami-0ed9277fb7eb570c9
  EnvNameParam:
    Description: Example 'dev' or 'test' switch, determines which settings are passed to userdata.
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
  TargetGroupEC2:
    Description: Target Group for EC2 
    Type: String
Mappings: 
  RegionMap: 
    us-east-1: 
      "HVM64": "ami-0ed9277fb7eb570c9"
    us-west-1: 
      "HVM64": "ami-0bdb828fd58c52235"
    eu-west-1: 
      "HVM64": "ami-047bb4163c506cd98"
    ap-southeast-1: 
      "HVM64": "ami-08569b978cc4dfa10"
    ap-northeast-1: 
      "HVM64": "ami-06cd52961ce9f0d85"
    us-east-2: 
      "HVM64": "ami-002068ed284fb165b"
Resources:
  SSMRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
  SSMPolicies: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "SSM-WordPress"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: 
            - "ssm:Get*"
            - "ssm:Describe*"
            -  "ssm:List*"
            Resource: "arn:aws:ssm:us-east-2:489994096722:parameter/wordpress-pass"
      Roles: 
        - Ref: "SSMRole"
  SSMInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - Ref: "SSMRole"
  EC2TargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: !Ref HealthCheckIntervalSecondsPara
        HealthCheckProtocol: !Ref HealthCheckProtocolPara
        HealthCheckTimeoutSeconds: !Ref HealthCheckTimeoutSecondsPara
        HealthyThresholdCount: !Ref HealthyThresholdCountPara
        Matcher:
          HttpCode: '200'
        Name: !Sub ${AWS::Region}-${TargetGroupEC2}-${EnvNameParam}
        Port: 80
        Protocol: !Ref HealthCheckProtocolPara
        TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
        UnhealthyThresholdCount: !Ref UnHealthyThresholdCountPara
        VpcId: !ImportValue 
          'Fn::Sub': '${AWS::Region}-${EnvNameParam}-VPC'
        Tags:
        - Key: Name
          Value: !Sub ${AWS::Region}-${TargetGroupEC2}-${EnvNameParam}
        - Key: Port
          Value: 80
  ALBListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - Type: forward
            TargetGroupArn:
              Ref: EC2TargetGroup
        LoadBalancerArn:
            Ref: ApplicationLoadBalancer
        Port: 80
        Protocol: HTTP
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing 
      Name: !Sub ${AWS::Region}-${EnvNameParam}-ALB
      Subnets:
      - !ImportValue 
           'Fn::Sub': '${AWS::Region}-${EnvNameParam}-PublicSubnet0'
      - !ImportValue 
           'Fn::Sub': '${AWS::Region}-${EnvNameParam}-PublicSubnet1'
      SecurityGroups:
      - !ImportValue 
           'Fn::Sub': '${AWS::Region}-${EnvNameParam}-ALB-SG'
  WordPressLaunchTemplate:
      Type: AWS::EC2::LaunchTemplate
      Properties:
        LaunchTemplateName: !Sub ${AWS::Region}-${EnvNameParam}-WordPressLaunchTemplate
        LaunchTemplateData:
          IamInstanceProfile:
            Name: !Ref SSMInstanceProfile
          DisableApiTermination: true
          ImageId: !Ref InstanceImageId
          InstanceType: !Ref InstanceTypeValue
          KeyName: web-app
          SecurityGroupIds:
            - !ImportValue 
                'Fn::Sub': '${AWS::Region}-${EnvNameParam}-Web-SG'
          UserData:
            Fn::Base64: 
              !Sub 
              - |
                #!/bin/bash
                "fn::"
                sudo yum update -y
                sudo amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
                sudo yum install -y httpd
                sudo systemctl start httpd
                sudo systemctl enable httpd
                sudo systemctl is-enabled httpd
                sudo usermod -a -G apache ec2-user
                sudo chown -R ec2-user:apache /var/www
                sudo chmod 2775 /var/www && find /var/www -type d -exec sudo chmod 2775 {} \;
                find /var/www -type f -exec sudo chmod 0664 {} \;
                sudo yum install php-mbstring php-xml -y
                sudo systemctl restart httpd
                sudo systemctl restart php-fpm
                wget https://wordpress.org/latest.tar.gz
                tar -xzf latest.tar.gz
                cp wordpress/wp-config-sample.php wordpress/wp-config.php
                cp -r wordpress/* /var/www/html/
                password=`aws ssm get-parameters --region us-east-2 --names wordpress-pass --with-decryption --query Parameters[0].Value`
                password=`echo $password | sed -e 's/^"//' -e 's/"$//'`
                db_name=`awk -F: '{print $1}'<<< $password`
                db_user=`awk -F: '{print $2}'<<< $password`
                db_pass=`awk -F: '{print $3}'<<< $password`
                sed -i "s/database_name_here/$db_name/g" /var/www/html/wp-config.php 
                sed -i "s/username_here/$db_user/g" /var/www/html/wp-config.php 
                sed -i "s/password_here/$db_pass/g" /var/www/html/wp-config.php
                sed -i "s/localhost/${WordPressRDSEndPoint}/g" /var/www/html/wp-config.php
              - WordPressRDSEndPoint: 
                  'Fn::ImportValue': !Sub ${AWS::Region}-${EnvNameParam}-Endpoint
  WordPressASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: ApplicationLoadBalancer
    Properties:
      AutoScalingGroupName: !Sub ${AWS::Region}-${EnvNameParam}-WordPressAutoScalingGroup
      MinSize: '1'
      MaxSize: '2'
      DesiredCapacity: '1'
      HealthCheckGracePeriod: !Ref HealthCheckGracePeriodPara
      LaunchTemplate:
        LaunchTemplateId: !Ref WordPressLaunchTemplate
        Version: !GetAtt WordPressLaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !ImportValue 
           'Fn::Sub': '${AWS::Region}-${EnvNameParam}-PrivateSubnet0'
        - !ImportValue 
           'Fn::Sub': '${AWS::Region}-${EnvNameParam}-PrivateSubnet1'
      TargetGroupARNs:
          - !Ref EC2TargetGroup
